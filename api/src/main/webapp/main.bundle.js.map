{"version":3,"sources":["webpack:///./src/app/login/login.component.html","webpack:///./src/app/services/configService/config.service.ts","webpack:///./src/app/services/httpService/http.service.ts","webpack:///./src async","webpack:///./src/main.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/login/login.component.ts","webpack:///./src/environments/environment.ts"],"names":[],"mappings":"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","file":"main.bundle.js","sourcesContent":["module.exports = \"<div class=\\\"page\\\">\\n\\n\\t<!-- Main logo -->\\n\\t<div>\\n\\t\\t<img src=\\\"assets/img/camping-icon.jpg\\\" class=\\\"logo\\\">\\n\\t</div>\\n\\n\\t<!-- App name -->\\n\\t<div class=\\\"app-name\\\">The Wild</div>\\n\\n\\t<!-- Twitter button -->\\n\\t<div>\\n\\t\\t<img src=\\\"assets/img/twitter-login.png\\\" class=\\\"twitter-button\\\" (click)=\\\"login()\\\" />\\n\\t</div>\\n\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/app/login/login.component.html\n// module id = 139\n// module chunks = 1","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Http } from '@angular/http';\nimport 'rxjs/add/operator/map'\n\n\n@Injectable()\nexport class ConfigService {\n\n\tprivate _config: Object;\n \t\n \t/*\n \t *\tCtor.\n \t */\n \tconstructor(private http: Http) {\n \t\t\n \t}\n \t\n \t/*\n \t *\tLoads config file.\n \t */\n \tpublic load() {\n\n \t\treturn new Promise((resolve, reject) => {\n\n\t\t\tthis.http.get('../../../config.json')\n\t\t\t.map(res => res.json())\n\t\t\t.subscribe((data) => {\n\t\t\t\t\n\t\t\t\tthis._config = data;\n\t\t\t\tresolve(true);\n\t\t\t});\n \t\t});\n \t}\n \t\n \t/*\n \t *\tReturns value of specified key.\n \t */\n \tpublic get(key: any) {\n\n   \t\treturn this._config[key];\n \t}\n }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/services/configService/config.service.ts","import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, RequestOptions, RequestMethod } from '@angular/http';\nimport { ConfigService } from '../configService/config.service';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/observable/of';\n\n\n@Injectable()\nexport class HttpService {\n\n\tpublic _baseUri: string;\n\n\t/**\n\t *\tCtor.\n\t */\n\tconstructor(private http: Http, private config: ConfigService) { \n\n\t\tif(!this._baseUri) {\n\n            this.config.load().then(() => {\n                \n                this._baseUri = config.get('baseUri');    \n            });\n\n\t\t\t\n        }\n\t}\n\n\n    /**\n     * Generates header by populating default values. \n     */\n    private getHeader(contentType: ContentTypes): Headers {\n\n        let headers = new Headers();\n\n        if (contentType == ContentTypes.URLENCODED)\n            headers.append('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n        else\n            headers.append('Content-Type', 'application/json; charset=UTF-8');\n        \n\n        headers.append('Accept', 'text/html, application/xhtml+xml, */*');\n\n        return headers;\n    }\n\n    /**\n     * Seializes given object.\n     * @param obj\n     */\n    private serializeObj(obj: any) {\n\n        var result: any = [];\n        for (var property in obj) {\n            result.push(encodeURIComponent(property) + \"=\" + encodeURIComponent(obj[property]));\n        }\n\n        return result.join(\"&\");\n    }\n\n    /**\n     * Extracts data from response.\n     * @param res - Response.\n     */\n    private extractData(res: Response) {\n        let body = res.json();\n        return body || {};\n    }\n\n    /**\n     * Handles errors.\n     * @param error\n     */\n    private handleError(error: Response | any) {\n\n        let errMsg: any;\n\n        if (error instanceof Response) {\n\n            if (error.status == 401) {\n\n                //this.router.navigate([\"login\"]);\n                return Observable.of(\"\");\n            }\n\n            const body = error.json() || '';\n            errMsg = body.InnerException ? body.InnerException : body;\n\n            if (errMsg.ExceptionType == \"System.UnauthorizedAccessException\") {\n\n                return Observable.of(\"\");\n            }\n\n        } else {\n            errMsg = error.message ? error.message : error.toString();\n        }\n\n        return Observable.throw(errMsg);\n    }\n\n    /**\n     * Performs http get operation with provided url.\n     * @param url - URL.\n     */\n    public get(url: string, contentType?: ContentTypes): Observable<any> {\n\n        //this.spinner.show();\n        return this.http.get(this._baseUri + url, { headers: this.getHeader(contentType) })\n            .map(this.extractData)\n            .catch((err: any) => this.handleError(err))\n            //.finally(() => this.spinner.hide());\n    }\n\n    /**\n     * Performs http post operation with given params.\n     * @param url - URL.\n     * @param body - Body.\n     * @param contentType - ContentType (JSON, UrlEncode vs).\n     */\n    public post(url: string, body: any, contentType?: ContentTypes): Observable<any> {\n\n        //this.spinner.show();\n        let options = new RequestOptions({ \n        \tmethod: RequestMethod.Post,\n        \theaders: this.getHeader(contentType) \n        });\n\n        let sBody = contentType == ContentTypes.URLENCODED ? this.serializeObj(body) : JSON.stringify(body);\n\n        return this.http.post(this._baseUri + url, sBody, options)\n            .map(this.extractData)\n            .catch((err: any) => this.handleError(err))\n            //.finally(() => this.spinner.hide());\n    }\n\n\n}\n\nexport const enum ContentTypes {\n    JSON,\n    URLENCODED\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/services/httpService/http.service.ts","function webpackEmptyContext(req) {\n\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 74;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src async\n// module id = 74\n// module chunks = 1","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {APP_BASE_HREF} from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\n\n// Components\nimport { LoginComponent } from './login/login.component';\n\n\n\n//Services\nimport { HttpService } from './services/httpService/http.service';\nimport { ConfigService } from './services/configService/config.service';\n\n\n\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    \n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule\n  ],\n  providers: [\n    ConfigService,\n    HttpService,\n    {provide: APP_BASE_HREF, useValue : '/' }\n\n  ],\n  bootstrap: [LoginComponent]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/app.module.ts","import { Component } from '@angular/core';\nimport { HttpService, ContentTypes } from '../services/httpService/http.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html'\n})\nexport class LoginComponent {\n\n\t/*\n\t *\tCtor.\n\t */\n\tconstructor(private http: HttpService) {\n\n\t}\n\n\t/*\n\t *\tAuthenticates user to Twitter.\n\t */\n\tlogin() {\n\n\t\tthis.http.post('/authenticate', {}, ContentTypes.URLENCODED)\n\t\t\t.subscribe(data => {\n\n\t            console.log(data);\n    \t    });\n\t}\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/login/login.component.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/environments/environment.ts"],"sourceRoot":""}